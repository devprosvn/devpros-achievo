L·ªói b·∫°n g·∫∑p khi thao t√°c v·ªõi Firestore g·ªìm **2 nh√≥m l·ªói ch√≠nh**:

---

## ‚ùå 1. **`Missing or insufficient permissions`**

### üîç Nguy√™n nh√¢n:

* Firestore Security Rules kh√¥ng cho ph√©p ng∆∞·ªùi d√πng hi·ªán t·∫°i (ho·∫∑c server SDK) th·ª±c hi·ªán thao t√°c ƒë√≥.
* V√≠ d·ª•: ng∆∞·ªùi d√πng kh√¥ng ƒëƒÉng nh·∫≠p, ho·∫∑c ƒëang d√πng `firebase-admin` t·ª´ m√¥i tr∆∞·ªùng kh√¥ng c√≥ quy·ªÅn.

### ‚úÖ C√°ch kh·∫Øc ph·ª•c:

#### ‚úÖ N·∫øu b·∫°n ƒëang d√πng **Client SDK (JS trong frontend)**:

1. ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng **ƒëƒÉng nh·∫≠p b·∫±ng Firebase Auth** tr∆∞·ªõc khi g·ªçi API.
2. X√©t l·∫°i **Firestore Rules**. V√≠ d·ª•, n·∫øu b·∫°n ch·ªâ cho ph√©p ng∆∞·ªùi d√πng c√≥ quy·ªÅn ch·ªânh s·ª≠a:

```js
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Rule cho courses
    match /courses/{courseId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // Rule cho ch·ª©ng ch·ªâ
    match /certificates/{certId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
```

> üîí B·∫°n c·∫ßn ƒëi·ªÅu ch·ªânh rule cho ƒë√∫ng use-case: n·∫øu client c·∫ßn quy·ªÅn ghi, ph·∫£i c·∫•p ƒë·ªß quy·ªÅn.

#### ‚úÖ N·∫øu b·∫°n ƒëang d√πng **Admin SDK (Node.js, Firebase Functions)**:

* ƒê·∫£m b·∫£o b·∫°n d√πng ƒë√∫ng `firebase-admin` v√† ƒë√£ `initializeApp()` ƒë√∫ng c√°ch:

```ts
import * as admin from 'firebase-admin';
admin.initializeApp();
```

---

## ‚ùå 2. **`Function updateDoc() called with invalid data. Unsupported field value: undefined`**

### üîç Nguy√™n nh√¢n:

B·∫°n ƒëang truy·ªÅn d·ªØ li·ªáu `undefined` v√†o `updateDoc`, c·ª• th·ªÉ l√† field `category`. V√≠ d·ª•:

```ts
await updateDoc(docRef, {
  category: course.category, // n·∫øu course.category l√† undefined ‚Üí l·ªói
});
```

### ‚úÖ C√°ch kh·∫Øc ph·ª•c:

* Tr∆∞·ªõc khi g·ªçi `updateDoc()`, ki·ªÉm tra d·ªØ li·ªáu:

```ts
if (course.category !== undefined) {
  await updateDoc(docRef, { category: course.category });
}
```

* Ho·∫∑c g·ªôp l·∫°i v√† l·ªçc c√°c field `undefined`:

```ts
const data = {
  title: course.title,
  category: course.category,
  description: course.description,
};

// Lo·∫°i b·ªè c√°c field c√≥ gi√° tr·ªã undefined
const validData = Object.fromEntries(Object.entries(data).filter(([_, v]) => v !== undefined));

await updateDoc(docRef, validData);
```

---

## ‚úÖ T√≥m t·∫Øt fix nhanh:

| L·ªói                                   | C√°ch kh·∫Øc ph·ª•c nhanh                                      |
| ------------------------------------- | --------------------------------------------------------- |
| `Missing or insufficient permissions` | ‚úÖ C·∫≠p nh·∫≠t Firestore Rules ph√π h·ª£p v√† x√°c th·ª±c ng∆∞·ªùi d√πng |
| `Unsupported field value: undefined`  | ‚úÖ Lo·∫°i b·ªè ho·∫∑c ki·ªÉm tra field tr∆∞·ªõc khi g·ªçi `updateDoc`   |

N·∫øu b·∫°n c·∫ßn m√¨nh ki·ªÉm tra gi√∫p ƒëo·∫°n rule c·ª• th·ªÉ ho·∫∑c code `updateDoc()`, b·∫°n c√≥ th·ªÉ paste v√†o ƒë√¢y.
