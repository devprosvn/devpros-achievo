Title: Clone Achievo Blockchain Digital Credential Platform Template with Custom Fonts (Vue.js Version)
Create an exact replica of the Achievo blockchain-based digital credential platform with the following precise specifications, using Vue.js as the framework.

FONT USAGE
Primary font: Aptos-Display (Uploaded files, ensure correct loading in all sections)

Logo Font: Use Aptos-Display-Bold-Italic for the "Achievo" text in the header. No icons next to the logo.

HEADER COMPONENT
Sticky header with white background and bottom border

Container with flex layout, height 64px (h-16)

Left side: Logo with text "Achievo" (text-xl font-bold, styled with Aptos-Display-Bold-Italic)

Right side navigation:

Desktop menu: Home, Marketplace, About, FAQ links (hidden on mobile, text-sm font-medium, hover:text-blue-600)

Wallet connection button OR connected wallet status indicator

Connected state: Outline button with green dot + wallet name + "Connected" text

Disconnected state: Primary blue button "Connect Wallet"

Vue.js Specifics:
Use <template>, <script>, and <style> sections.

Create a Header.vue component with props for user wallet connection status.

HERO SECTION
Background: Gradient from blue-50 to white (bg-gradient-to-b from-blue-50 to-white)

Padding: py-20

Container with centered flex column layout, gap-8, text-center

Main heading:

Text: "Secure Digital Credentials on Blockchain" (with "Blockchain" in blue-600)

Classes: text-4xl font-bold tracking-tight sm:text-5xl md:text-6xl, styled with Aptos-Display

Subtitle paragraph:

Text: "Achievo leverages NEAR Protocol to provide tamper-proof certificates and rewards for learners and organizations."

Classes: max-w-2xl text-lg text-muted-foreground, styled with Aptos-Display-Italic

Button group:

Primary button: "Connect Wallet" (size-lg)

Secondary button: "Learn More" (size-lg variant-outline)

Layout: flex-col gap-4 sm:flex-row

Vue.js Specifics:
Create a HeroSection.vue component.

Use <button> elements with @click events for actions.

Use Vue props or emits for dynamic text and button states.

FEATURES SECTION
White background, py-20 padding

Section title: "Platform Benefits" (text-center text-3xl font-bold, mb-12, styled with Aptos-Display)

Three-column grid (md:grid-cols-3, gap-8):

Feature Cards:
Secure Authentication: Use Shield icon, text styled with Aptos-Display-Bold for title, Aptos-Display-Italic for description.

Dynamic NFT Certificates: Use Award icon, similar styles.

Instant Verification: Use CheckCircle icon, similar styles.

Each card: flex flex-col items-center gap-4 rounded-lg border p-6 text-center

Vue.js Specifics:
Create a reusable FeatureCard.vue component.

Pass data via props (icon, title, description) for dynamic rendering.

CTA SECTION
Background: bg-blue-600, text-white, py-16

Container: flex flex-col items-center gap-6 text-center

Heading: "Ready to Get Started?" (text-3xl font-bold, styled with Aptos-Display)

Description: "Join thousands of learners and organizations already using Achievo for secure digital credentials." (max-w-2xl text-blue-100, styled with Aptos-Display-Italic)

Button: "Connect Wallet" with ArrowRight icon (size-lg variant-secondary mt-4)

Vue.js Specifics:
Create a CallToAction.vue component.

Use Vue’s @click event for wallet connection logic.

FOOTER
Border-top, py-12 padding

Container with flex layout: flex-col items-center justify-between gap-6 md:flex-row

Left: Logo (text "Achievo" styled with Aptos-Display-Bold-Italic)

Center: Links (Terms, Privacy, Contact) with gap-8, text-sm text-muted-foreground hover:text-blue-600, styled with Aptos-Display)

Right: Copyright "© 2023 Achievo. All rights reserved." (text-sm text-muted-foreground, styled with Aptos-Display-Italic)

Vue.js Specifics:
Create a Footer.vue component.

Use dynamic slots for links.

WALLET CONNECTION MODAL
Vue Dialog component with conditional rendering.

Two wallet options in grid gap-4 py-4:

Meteor Wallet: Button styled with blue accents.

MyNearWallet: Button styled with green accents.

Vue.js Specifics:
Create a WalletConnectionModal.vue component.

Use v-model for modal visibility state.

Implement a mock connectWallet method with simulated async behavior.

STYLING REQUIREMENTS
Load fonts dynamically using @font-face or CSS imports.

Use Tailwind CSS for utility-first styling.

Fallback font in case of issues: "Arial, sans-serif".

TECHNICAL SPECIFICATIONS
Use Vue.js 3 Composition API.

Use Pinia or Vuex for state management (e.g., wallet connection state).

Create modular components for maintainability.

Ensure all fonts, colors, and spacing are consistent with the specification.